<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="426" onload="init(evt)" viewBox="0 0 1200 426" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="426" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record --pid 43345 -o flame.svg</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="415.00"> </text><svg id="frames" x="10" width="1180" total_samples="4932"><g><title>_flush_loop (processor.py:348) (8 samples, 0.16%)</title><rect x="0.4663%" y="180" width="0.1622%" height="15" fill="rgb(227,0,7)" fg:x="23" fg:w="8"/><text x="0.7163%" y="190.50"></text></g><g><title>_read_ready__data_received (asyncio/selector_events.py:1013) (6 samples, 0.12%)</title><rect x="0.6894%" y="196" width="0.1217%" height="15" fill="rgb(217,0,24)" fg:x="34" fg:w="6"/><text x="0.9394%" y="206.50"></text></g><g><title>feed_data (asyncio/streams.py:506) (7 samples, 0.14%)</title><rect x="0.8313%" y="228" width="0.1419%" height="15" fill="rgb(221,193,54)" fg:x="41" fg:w="7"/><text x="1.0813%" y="238.50"></text></g><g><title>_wakeup_waiter (asyncio/streams.py:480) (5 samples, 0.10%)</title><rect x="0.8719%" y="244" width="0.1014%" height="15" fill="rgb(248,212,6)" fg:x="43" fg:w="5"/><text x="1.1219%" y="254.50"></text></g><g><title>_read_ready (asyncio/selector_events.py:970) (18 samples, 0.36%)</title><rect x="0.6691%" y="180" width="0.3650%" height="15" fill="rgb(208,68,35)" fg:x="33" fg:w="18"/><text x="0.9191%" y="190.50"></text></g><g><title>_read_ready__data_received (asyncio/selector_events.py:1027) (11 samples, 0.22%)</title><rect x="0.8110%" y="196" width="0.2230%" height="15" fill="rgb(232,128,0)" fg:x="40" fg:w="11"/><text x="1.0610%" y="206.50"></text></g><g><title>data_received (asyncio/streams.py:287) (10 samples, 0.20%)</title><rect x="0.8313%" y="212" width="0.2028%" height="15" fill="rgb(207,160,47)" fg:x="41" fg:w="10"/><text x="1.0813%" y="222.50"></text></g><g><title>rollback (aiomysql/connection.py:398) (8 samples, 0.16%)</title><rect x="1.0746%" y="212" width="0.1622%" height="15" fill="rgb(228,23,34)" fg:x="53" fg:w="8"/><text x="1.3246%" y="222.50"></text></g><g><title>_execute_command (aiomysql/connection.py:724) (7 samples, 0.14%)</title><rect x="1.0949%" y="228" width="0.1419%" height="15" fill="rgb(218,30,26)" fg:x="54" fg:w="7"/><text x="1.3449%" y="238.50"></text></g><g><title>_write_bytes (aiomysql/connection.py:669) (6 samples, 0.12%)</title><rect x="1.1152%" y="244" width="0.1217%" height="15" fill="rgb(220,122,19)" fg:x="55" fg:w="6"/><text x="1.3652%" y="254.50"></text></g><g><title>write (asyncio/streams.py:346) (6 samples, 0.12%)</title><rect x="1.1152%" y="260" width="0.1217%" height="15" fill="rgb(250,228,42)" fg:x="55" fg:w="6"/><text x="1.3652%" y="270.50"></text></g><g><title>write (asyncio/selector_events.py:1075) (6 samples, 0.12%)</title><rect x="1.1152%" y="276" width="0.1217%" height="15" fill="rgb(240,193,28)" fg:x="55" fg:w="6"/><text x="1.3652%" y="286.50"></text></g><g><title>greenlet_spawn (sqlalchemy/util/_concurrency_py3k.py:196) (20 samples, 0.41%)</title><rect x="1.0746%" y="196" width="0.4055%" height="15" fill="rgb(216,20,37)" fg:x="53" fg:w="20"/><text x="1.3246%" y="206.50"></text></g><g><title>rollback (aiomysql/connection.py:399) (12 samples, 0.24%)</title><rect x="1.2368%" y="212" width="0.2433%" height="15" fill="rgb(206,188,39)" fg:x="61" fg:w="12"/><text x="1.4868%" y="222.50"></text></g><g><title>_read_ok_packet (aiomysql/connection.py:375) (7 samples, 0.14%)</title><rect x="1.3382%" y="228" width="0.1419%" height="15" fill="rgb(217,207,13)" fg:x="66" fg:w="7"/><text x="1.5882%" y="238.50"></text></g><g><title>__init__ (pymysql/protocol.py:306) (5 samples, 0.10%)</title><rect x="1.3788%" y="244" width="0.1014%" height="15" fill="rgb(231,73,38)" fg:x="68" fg:w="5"/><text x="1.6288%" y="254.50"></text></g><g><title>close (sqlalchemy/ext/asyncio/session.py:1027) (24 samples, 0.49%)</title><rect x="1.0341%" y="180" width="0.4866%" height="15" fill="rgb(225,20,46)" fg:x="51" fg:w="24"/><text x="1.2841%" y="190.50"></text></g><g><title>_write_sendmsg (asyncio/selector_events.py:1102) (7 samples, 0.14%)</title><rect x="1.7234%" y="324" width="0.1419%" height="15" fill="rgb(210,31,41)" fg:x="85" fg:w="7"/><text x="1.9734%" y="334.50"></text></g><g><title>send_packed_command (redis/asyncio/connection.py:480) (10 samples, 0.20%)</title><rect x="1.7032%" y="276" width="0.2028%" height="15" fill="rgb(221,200,47)" fg:x="84" fg:w="10"/><text x="1.9532%" y="286.50"></text></g><g><title>writelines (asyncio/streams.py:349) (10 samples, 0.20%)</title><rect x="1.7032%" y="292" width="0.2028%" height="15" fill="rgb(226,26,5)" fg:x="84" fg:w="10"/><text x="1.9532%" y="302.50"></text></g><g><title>writelines (asyncio/selector_events.py:1182) (9 samples, 0.18%)</title><rect x="1.7234%" y="308" width="0.1825%" height="15" fill="rgb(249,33,26)" fg:x="85" fg:w="9"/><text x="1.9734%" y="318.50"></text></g><g><title>send_command (redis/asyncio/connection.py:505) (13 samples, 0.26%)</title><rect x="1.6626%" y="260" width="0.2636%" height="15" fill="rgb(235,183,28)" fg:x="82" fg:w="13"/><text x="1.9126%" y="270.50"></text></g><g><title>_send_command_parse_response (redis/asyncio/client.py:589) (15 samples, 0.30%)</title><rect x="1.6626%" y="244" width="0.3041%" height="15" fill="rgb(221,5,38)" fg:x="82" fg:w="15"/><text x="1.9126%" y="254.50"></text></g><g><title>parse_response (redis/asyncio/client.py:637) (8 samples, 0.16%)</title><rect x="1.9870%" y="260" width="0.1622%" height="15" fill="rgb(247,18,42)" fg:x="98" fg:w="8"/><text x="2.2370%" y="270.50"></text></g><g><title>read_response (redis/asyncio/connection.py:549) (8 samples, 0.16%)</title><rect x="1.9870%" y="276" width="0.1622%" height="15" fill="rgb(241,131,45)" fg:x="98" fg:w="8"/><text x="2.2370%" y="286.50"></text></g><g><title>read_response (redis/_parsers/resp2.py:82) (8 samples, 0.16%)</title><rect x="1.9870%" y="292" width="0.1622%" height="15" fill="rgb(249,31,29)" fg:x="98" fg:w="8"/><text x="2.2370%" y="302.50"></text></g><g><title>main (processor.py:526) (35 samples, 0.71%)</title><rect x="1.5207%" y="180" width="0.7097%" height="15" fill="rgb(225,111,53)" fg:x="75" fg:w="35"/><text x="1.7707%" y="190.50"></text></g><g><title>get_message (processor.py:76) (35 samples, 0.71%)</title><rect x="1.5207%" y="196" width="0.7097%" height="15" fill="rgb(238,160,17)" fg:x="75" fg:w="35"/><text x="1.7707%" y="206.50"></text></g><g><title>execute_command (redis/asyncio/client.py:616) (30 samples, 0.61%)</title><rect x="1.6221%" y="212" width="0.6083%" height="15" fill="rgb(214,148,48)" fg:x="80" fg:w="30"/><text x="1.8721%" y="222.50"></text></g><g><title>call_with_retry (redis/asyncio/retry.py:59) (28 samples, 0.57%)</title><rect x="1.6626%" y="228" width="0.5677%" height="15" fill="rgb(232,36,49)" fg:x="82" fg:w="28"/><text x="1.9126%" y="238.50"></text></g><g><title>_send_command_parse_response (redis/asyncio/client.py:590) (13 samples, 0.26%)</title><rect x="1.9667%" y="244" width="0.2636%" height="15" fill="rgb(209,103,24)" fg:x="97" fg:w="13"/><text x="2.2167%" y="254.50"></text></g><g><title>_parse_message (processor.py:238) (18 samples, 0.36%)</title><rect x="2.2709%" y="212" width="0.3650%" height="15" fill="rgb(229,88,8)" fg:x="112" fg:w="18"/><text x="2.5209%" y="222.50"></text></g><g><title>_strptime_datetime (_strptime.py:554) (16 samples, 0.32%)</title><rect x="2.3114%" y="228" width="0.3244%" height="15" fill="rgb(213,181,19)" fg:x="114" fg:w="16"/><text x="2.5614%" y="238.50"></text></g><g><title>process_message (processor.py:304) (26 samples, 0.53%)</title><rect x="2.2303%" y="196" width="0.5272%" height="15" fill="rgb(254,191,54)" fg:x="110" fg:w="26"/><text x="2.4803%" y="206.50"></text></g><g><title>execute_command (redis/asyncio/client.py:611) (7 samples, 0.14%)</title><rect x="2.7778%" y="228" width="0.1419%" height="15" fill="rgb(241,83,37)" fg:x="137" fg:w="7"/><text x="3.0278%" y="238.50"></text></g><g><title>get_connection (redis/asyncio/connection.py:1064) (5 samples, 0.10%)</title><rect x="2.8183%" y="244" width="0.1014%" height="15" fill="rgb(233,36,39)" fg:x="139" fg:w="5"/><text x="3.0683%" y="254.50"></text></g><g><title>ensure_connection (redis/asyncio/connection.py:1103) (5 samples, 0.10%)</title><rect x="2.8183%" y="260" width="0.1014%" height="15" fill="rgb(226,3,54)" fg:x="139" fg:w="5"/><text x="3.0683%" y="270.50"></text></g><g><title>can_read_destructive (redis/asyncio/connection.py:512) (5 samples, 0.10%)</title><rect x="2.8183%" y="276" width="0.1014%" height="15" fill="rgb(245,192,40)" fg:x="139" fg:w="5"/><text x="3.0683%" y="286.50"></text></g><g><title>can_read_destructive (redis/_parsers/base.py:184) (5 samples, 0.10%)</title><rect x="2.8183%" y="292" width="0.1014%" height="15" fill="rgb(238,167,29)" fg:x="139" fg:w="5"/><text x="3.0683%" y="302.50"></text></g><g><title>_write_sendmsg (asyncio/selector_events.py:1102) (6 samples, 0.12%)</title><rect x="3.0008%" y="340" width="0.1217%" height="15" fill="rgb(232,182,51)" fg:x="148" fg:w="6"/><text x="3.2508%" y="350.50"></text></g><g><title>send_packed_command (redis/asyncio/connection.py:480) (9 samples, 0.18%)</title><rect x="2.9805%" y="292" width="0.1825%" height="15" fill="rgb(231,60,39)" fg:x="147" fg:w="9"/><text x="3.2305%" y="302.50"></text></g><g><title>writelines (asyncio/streams.py:349) (9 samples, 0.18%)</title><rect x="2.9805%" y="308" width="0.1825%" height="15" fill="rgb(208,69,12)" fg:x="147" fg:w="9"/><text x="3.2305%" y="318.50"></text></g><g><title>writelines (asyncio/selector_events.py:1182) (8 samples, 0.16%)</title><rect x="3.0008%" y="324" width="0.1622%" height="15" fill="rgb(235,93,37)" fg:x="148" fg:w="8"/><text x="3.2508%" y="334.50"></text></g><g><title>send_command (redis/asyncio/connection.py:505) (11 samples, 0.22%)</title><rect x="2.9603%" y="276" width="0.2230%" height="15" fill="rgb(213,116,39)" fg:x="146" fg:w="11"/><text x="3.2103%" y="286.50"></text></g><g><title>_send_command_parse_response (redis/asyncio/client.py:589) (14 samples, 0.28%)</title><rect x="2.9603%" y="260" width="0.2839%" height="15" fill="rgb(222,207,29)" fg:x="146" fg:w="14"/><text x="3.2103%" y="270.50"></text></g><g><title>_get_last_campus_cached (processor.py:454) (30 samples, 0.61%)</title><rect x="2.7575%" y="212" width="0.6083%" height="15" fill="rgb(206,96,30)" fg:x="136" fg:w="30"/><text x="3.0075%" y="222.50"></text></g><g><title>execute_command (redis/asyncio/client.py:616) (22 samples, 0.45%)</title><rect x="2.9197%" y="228" width="0.4461%" height="15" fill="rgb(218,138,4)" fg:x="144" fg:w="22"/><text x="3.1697%" y="238.50"></text></g><g><title>call_with_retry (redis/asyncio/retry.py:59) (22 samples, 0.45%)</title><rect x="2.9197%" y="244" width="0.4461%" height="15" fill="rgb(250,191,14)" fg:x="144" fg:w="22"/><text x="3.1697%" y="254.50"></text></g><g><title>_send_command_parse_response (redis/asyncio/client.py:590) (6 samples, 0.12%)</title><rect x="3.2441%" y="260" width="0.1217%" height="15" fill="rgb(239,60,40)" fg:x="160" fg:w="6"/><text x="3.4941%" y="270.50"></text></g><g><title>parse_response (redis/asyncio/client.py:637) (6 samples, 0.12%)</title><rect x="3.2441%" y="276" width="0.1217%" height="15" fill="rgb(206,27,48)" fg:x="160" fg:w="6"/><text x="3.4941%" y="286.50"></text></g><g><title>read_response (redis/asyncio/connection.py:549) (5 samples, 0.10%)</title><rect x="3.2644%" y="292" width="0.1014%" height="15" fill="rgb(225,35,8)" fg:x="161" fg:w="5"/><text x="3.5144%" y="302.50"></text></g><g><title>query (aiomysql/connection.py:468) (5 samples, 0.10%)</title><rect x="3.4672%" y="324" width="0.1014%" height="15" fill="rgb(250,213,24)" fg:x="171" fg:w="5"/><text x="3.7172%" y="334.50"></text></g><g><title>get_last_campus (processor.py:162) (10 samples, 0.20%)</title><rect x="3.4469%" y="228" width="0.2028%" height="15" fill="rgb(247,123,22)" fg:x="170" fg:w="10"/><text x="3.6969%" y="238.50"></text></g><g><title>execute (sqlalchemy/ext/asyncio/session.py:463) (10 samples, 0.20%)</title><rect x="3.4469%" y="244" width="0.2028%" height="15" fill="rgb(231,138,38)" fg:x="170" fg:w="10"/><text x="3.6969%" y="254.50"></text></g><g><title>greenlet_spawn (sqlalchemy/util/_concurrency_py3k.py:196) (9 samples, 0.18%)</title><rect x="3.4672%" y="260" width="0.1825%" height="15" fill="rgb(231,145,46)" fg:x="171" fg:w="9"/><text x="3.7172%" y="270.50"></text></g><g><title>_execute_async (sqlalchemy/dialects/mysql/aiomysql.py:106) (9 samples, 0.18%)</title><rect x="3.4672%" y="276" width="0.1825%" height="15" fill="rgb(251,118,11)" fg:x="171" fg:w="9"/><text x="3.7172%" y="286.50"></text></g><g><title>execute (aiomysql/cursors.py:239) (9 samples, 0.18%)</title><rect x="3.4672%" y="292" width="0.1825%" height="15" fill="rgb(217,147,25)" fg:x="171" fg:w="9"/><text x="3.7172%" y="302.50"></text></g><g><title>_query (aiomysql/cursors.py:457) (9 samples, 0.18%)</title><rect x="3.4672%" y="308" width="0.1825%" height="15" fill="rgb(247,81,37)" fg:x="171" fg:w="9"/><text x="3.7172%" y="318.50"></text></g><g><title>process_message (processor.py:309) (48 samples, 0.97%)</title><rect x="2.7575%" y="196" width="0.9732%" height="15" fill="rgb(209,12,38)" fg:x="136" fg:w="48"/><text x="3.0075%" y="206.50"></text></g><g><title>_get_last_campus_cached (processor.py:458) (18 samples, 0.36%)</title><rect x="3.3658%" y="212" width="0.3650%" height="15" fill="rgb(227,1,9)" fg:x="166" fg:w="18"/><text x="3.6158%" y="222.50"></text></g><g><title>__call__ (sqlalchemy/orm/session.py:5143) (5 samples, 0.10%)</title><rect x="3.9538%" y="228" width="0.1014%" height="15" fill="rgb(248,47,43)" fg:x="195" fg:w="5"/><text x="4.2038%" y="238.50"></text></g><g><title>__init__ (sqlalchemy/ext/asyncio/session.py:272) (5 samples, 0.10%)</title><rect x="3.9538%" y="244" width="0.1014%" height="15" fill="rgb(221,10,30)" fg:x="195" fg:w="5"/><text x="4.2038%" y="254.50"></text></g><g><title>get_last_connection_time (processor.py:177) (10 samples, 0.20%)</title><rect x="3.8727%" y="212" width="0.2028%" height="15" fill="rgb(210,229,1)" fg:x="191" fg:w="10"/><text x="4.1227%" y="222.50"></text></g><g><title>query (aiomysql/connection.py:468) (6 samples, 0.12%)</title><rect x="4.3593%" y="308" width="0.1217%" height="15" fill="rgb(222,148,37)" fg:x="215" fg:w="6"/><text x="4.6093%" y="318.50"></text></g><g><title>_execute_command (aiomysql/connection.py:724) (5 samples, 0.10%)</title><rect x="4.3796%" y="324" width="0.1014%" height="15" fill="rgb(234,67,33)" fg:x="216" fg:w="5"/><text x="4.6296%" y="334.50"></text></g><g><title>_write_bytes (aiomysql/connection.py:669) (5 samples, 0.10%)</title><rect x="4.3796%" y="340" width="0.1014%" height="15" fill="rgb(247,98,35)" fg:x="216" fg:w="5"/><text x="4.6296%" y="350.50"></text></g><g><title>write (asyncio/streams.py:346) (5 samples, 0.10%)</title><rect x="4.3796%" y="356" width="0.1014%" height="15" fill="rgb(247,138,52)" fg:x="216" fg:w="5"/><text x="4.6296%" y="366.50"></text></g><g><title>write (asyncio/selector_events.py:1075) (5 samples, 0.10%)</title><rect x="4.3796%" y="372" width="0.1014%" height="15" fill="rgb(213,79,30)" fg:x="216" fg:w="5"/><text x="4.6296%" y="382.50"></text></g><g><title>read (aiomysql/connection.py:1164) (9 samples, 0.18%)</title><rect x="4.4809%" y="340" width="0.1825%" height="15" fill="rgb(246,177,23)" fg:x="221" fg:w="9"/><text x="4.7309%" y="350.50"></text></g><g><title>_read_result_packet (aiomysql/connection.py:1231) (5 samples, 0.10%)</title><rect x="4.6837%" y="356" width="0.1014%" height="15" fill="rgb(230,62,27)" fg:x="231" fg:w="5"/><text x="4.9337%" y="366.50"></text></g><g><title>_get_descriptions (aiomysql/connection.py:1317) (5 samples, 0.10%)</title><rect x="4.6837%" y="372" width="0.1014%" height="15" fill="rgb(216,154,8)" fg:x="231" fg:w="5"/><text x="4.9337%" y="382.50"></text></g><g><title>greenlet_spawn (sqlalchemy/util/_concurrency_py3k.py:196) (43 samples, 0.87%)</title><rect x="4.2174%" y="244" width="0.8719%" height="15" fill="rgb(244,35,45)" fg:x="208" fg:w="43"/><text x="4.4674%" y="254.50"></text></g><g><title>_execute_async (sqlalchemy/dialects/mysql/aiomysql.py:106) (43 samples, 0.87%)</title><rect x="4.2174%" y="260" width="0.8719%" height="15" fill="rgb(251,115,12)" fg:x="208" fg:w="43"/><text x="4.4674%" y="270.50"></text></g><g><title>execute (aiomysql/cursors.py:239) (37 samples, 0.75%)</title><rect x="4.3390%" y="276" width="0.7502%" height="15" fill="rgb(240,54,50)" fg:x="214" fg:w="37"/><text x="4.5890%" y="286.50"></text></g><g><title>_query (aiomysql/cursors.py:457) (37 samples, 0.75%)</title><rect x="4.3390%" y="292" width="0.7502%" height="15" fill="rgb(233,84,52)" fg:x="214" fg:w="37"/><text x="4.5890%" y="302.50"></text></g><g><title>query (aiomysql/connection.py:469) (30 samples, 0.61%)</title><rect x="4.4809%" y="308" width="0.6083%" height="15" fill="rgb(207,117,47)" fg:x="221" fg:w="30"/><text x="4.7309%" y="318.50"></text></g><g><title>_read_query_result (aiomysql/connection.py:683) (30 samples, 0.61%)</title><rect x="4.4809%" y="324" width="0.6083%" height="15" fill="rgb(249,43,39)" fg:x="221" fg:w="30"/><text x="4.7309%" y="334.50"></text></g><g><title>read (aiomysql/connection.py:1172) (21 samples, 0.43%)</title><rect x="4.6634%" y="340" width="0.4258%" height="15" fill="rgb(209,38,44)" fg:x="230" fg:w="21"/><text x="4.9134%" y="350.50"></text></g><g><title>_read_result_packet (aiomysql/connection.py:1232) (15 samples, 0.30%)</title><rect x="4.7851%" y="356" width="0.3041%" height="15" fill="rgb(236,212,23)" fg:x="236" fg:w="15"/><text x="5.0351%" y="366.50"></text></g><g><title>_read_rowdata_packet (aiomysql/connection.py:1287) (11 samples, 0.22%)</title><rect x="4.8662%" y="372" width="0.2230%" height="15" fill="rgb(242,79,21)" fg:x="240" fg:w="11"/><text x="5.1162%" y="382.50"></text></g><g><title>_read_row_from_packet (aiomysql/connection.py:1305) (9 samples, 0.18%)</title><rect x="4.9067%" y="388" width="0.1825%" height="15" fill="rgb(211,96,35)" fg:x="242" fg:w="9"/><text x="5.1567%" y="398.50"></text></g><g><title>execute (sqlalchemy/ext/asyncio/session.py:463) (51 samples, 1.03%)</title><rect x="4.0957%" y="228" width="1.0341%" height="15" fill="rgb(253,215,40)" fg:x="202" fg:w="51"/><text x="4.3457%" y="238.50"></text></g><g><title>get_last_connection_time (processor.py:178) (53 samples, 1.07%)</title><rect x="4.0754%" y="212" width="1.0746%" height="15" fill="rgb(211,81,21)" fg:x="201" fg:w="53"/><text x="4.3254%" y="222.50"></text></g><g><title>process_message (processor.py:313) (76 samples, 1.54%)</title><rect x="3.7307%" y="196" width="1.5410%" height="15" fill="rgb(208,190,38)" fg:x="184" fg:w="76"/><text x="3.9807%" y="206.50"></text></g><g><title>notify_movement (processor.py:504) (9 samples, 0.18%)</title><rect x="5.3528%" y="212" width="0.1825%" height="15" fill="rgb(235,213,38)" fg:x="264" fg:w="9"/><text x="5.6028%" y="222.50"></text></g><g><title>process_message (processor.py:322) (25 samples, 0.51%)</title><rect x="5.2717%" y="196" width="0.5069%" height="15" fill="rgb(237,122,38)" fg:x="260" fg:w="25"/><text x="5.5217%" y="206.50"></text></g><g><title>notify_movement (processor.py:508) (12 samples, 0.24%)</title><rect x="5.5353%" y="212" width="0.2433%" height="15" fill="rgb(244,218,35)" fg:x="273" fg:w="12"/><text x="5.7853%" y="222.50"></text></g><g><title>info (logging/__init__.py:2216) (12 samples, 0.24%)</title><rect x="5.5353%" y="228" width="0.2433%" height="15" fill="rgb(240,68,47)" fg:x="273" fg:w="12"/><text x="5.7853%" y="238.50"></text></g><g><title>info (logging/__init__.py:1539) (10 samples, 0.20%)</title><rect x="5.5758%" y="244" width="0.2028%" height="15" fill="rgb(210,16,53)" fg:x="275" fg:w="10"/><text x="5.8258%" y="254.50"></text></g><g><title>execute_command (redis/asyncio/client.py:611) (5 samples, 0.10%)</title><rect x="5.7989%" y="212" width="0.1014%" height="15" fill="rgb(235,124,12)" fg:x="286" fg:w="5"/><text x="6.0489%" y="222.50"></text></g><g><title>send_packed_command (redis/asyncio/connection.py:480) (8 samples, 0.16%)</title><rect x="5.9205%" y="276" width="0.1622%" height="15" fill="rgb(224,169,11)" fg:x="292" fg:w="8"/><text x="6.1705%" y="286.50"></text></g><g><title>writelines (asyncio/streams.py:349) (8 samples, 0.16%)</title><rect x="5.9205%" y="292" width="0.1622%" height="15" fill="rgb(250,166,2)" fg:x="292" fg:w="8"/><text x="6.1705%" y="302.50"></text></g><g><title>writelines (asyncio/selector_events.py:1182) (7 samples, 0.14%)</title><rect x="5.9408%" y="308" width="0.1419%" height="15" fill="rgb(242,216,29)" fg:x="293" fg:w="7"/><text x="6.1908%" y="318.50"></text></g><g><title>_write_sendmsg (asyncio/selector_events.py:1102) (7 samples, 0.14%)</title><rect x="5.9408%" y="324" width="0.1419%" height="15" fill="rgb(230,116,27)" fg:x="293" fg:w="7"/><text x="6.1908%" y="334.50"></text></g><g><title>send_command (redis/asyncio/connection.py:505) (9 samples, 0.18%)</title><rect x="5.9205%" y="260" width="0.1825%" height="15" fill="rgb(228,99,48)" fg:x="292" fg:w="9"/><text x="6.1705%" y="270.50"></text></g><g><title>_send_command_parse_response (redis/asyncio/client.py:589) (14 samples, 0.28%)</title><rect x="5.9205%" y="244" width="0.2839%" height="15" fill="rgb(253,11,6)" fg:x="292" fg:w="14"/><text x="6.1705%" y="254.50"></text></g><g><title>send_command (redis/asyncio/connection.py:506) (5 samples, 0.10%)</title><rect x="6.1030%" y="260" width="0.1014%" height="15" fill="rgb(247,143,39)" fg:x="301" fg:w="5"/><text x="6.3530%" y="270.50"></text></g><g><title>read_response (redis/asyncio/connection.py:549) (5 samples, 0.10%)</title><rect x="6.2449%" y="276" width="0.1014%" height="15" fill="rgb(236,97,10)" fg:x="308" fg:w="5"/><text x="6.4949%" y="286.50"></text></g><g><title>read_response (redis/_parsers/resp2.py:82) (5 samples, 0.10%)</title><rect x="6.2449%" y="292" width="0.1014%" height="15" fill="rgb(233,208,19)" fg:x="308" fg:w="5"/><text x="6.4949%" y="302.50"></text></g><g><title>parse_response (redis/asyncio/client.py:637) (7 samples, 0.14%)</title><rect x="6.2247%" y="260" width="0.1419%" height="15" fill="rgb(216,164,2)" fg:x="307" fg:w="7"/><text x="6.4747%" y="270.50"></text></g><g><title>execute_command (redis/asyncio/client.py:616) (24 samples, 0.49%)</title><rect x="5.9002%" y="212" width="0.4866%" height="15" fill="rgb(220,129,5)" fg:x="291" fg:w="24"/><text x="6.1502%" y="222.50"></text></g><g><title>call_with_retry (redis/asyncio/retry.py:59) (23 samples, 0.47%)</title><rect x="5.9205%" y="228" width="0.4663%" height="15" fill="rgb(242,17,10)" fg:x="292" fg:w="23"/><text x="6.1705%" y="238.50"></text></g><g><title>_send_command_parse_response (redis/asyncio/client.py:590) (9 samples, 0.18%)</title><rect x="6.2044%" y="244" width="0.1825%" height="15" fill="rgb(242,107,0)" fg:x="306" fg:w="9"/><text x="6.4544%" y="254.50"></text></g><g><title>_run_once (asyncio/base_events.py:1987) (301 samples, 6.10%)</title><rect x="0.3041%" y="148" width="6.1030%" height="15" fill="rgb(251,28,31)" fg:x="15" fg:w="301"/><text x="0.5541%" y="158.50">_run_onc..</text></g><g><title>_run (asyncio/events.py:88) (301 samples, 6.10%)</title><rect x="0.3041%" y="164" width="6.1030%" height="15" fill="rgb(233,223,10)" fg:x="15" fg:w="301"/><text x="0.5541%" y="174.50">_run (as..</text></g><g><title>main (processor.py:528) (206 samples, 4.18%)</title><rect x="2.2303%" y="180" width="4.1768%" height="15" fill="rgb(215,21,27)" fg:x="110" fg:w="206"/><text x="2.4803%" y="190.50">main ..</text></g><g><title>process_message (processor.py:330) (31 samples, 0.63%)</title><rect x="5.7786%" y="196" width="0.6285%" height="15" fill="rgb(232,23,21)" fg:x="285" fg:w="31"/><text x="6.0286%" y="206.50"></text></g><g><title>run_forever (asyncio/base_events.py:641) (317 samples, 6.43%)</title><rect x="0.0000%" y="132" width="6.4274%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="317"/><text x="0.2500%" y="142.50">run_fore..</text></g><g><title>&lt;module&gt; (processor.py:538) (318 samples, 6.45%)</title><rect x="0.0000%" y="68" width="6.4477%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="318"/><text x="0.2500%" y="78.50">&lt;module&gt;..</text></g><g><title>run (asyncio/runners.py:194) (318 samples, 6.45%)</title><rect x="0.0000%" y="84" width="6.4477%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="318"/><text x="0.2500%" y="94.50">run (asy..</text></g><g><title>run (asyncio/runners.py:118) (318 samples, 6.45%)</title><rect x="0.0000%" y="100" width="6.4477%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="318"/><text x="0.2500%" y="110.50">run (asy..</text></g><g><title>run_until_complete (asyncio/base_events.py:674) (318 samples, 6.45%)</title><rect x="0.0000%" y="116" width="6.4477%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="318"/><text x="0.2500%" y="126.50">run_unti..</text></g><g><title>_bootstrap (threading.py:1030) (4,523 samples, 91.71%)</title><rect x="6.4477%" y="68" width="91.7072%" height="15" fill="rgb(223,113,26)" fg:x="318" fg:w="4523"/><text x="6.6977%" y="78.50">_bootstrap (threading.py:1030)</text></g><g><title>_bootstrap_inner (threading.py:1073) (4,523 samples, 91.71%)</title><rect x="6.4477%" y="84" width="91.7072%" height="15" fill="rgb(206,192,2)" fg:x="318" fg:w="4523"/><text x="6.6977%" y="94.50">_bootstrap_inner (threading.py:1073)</text></g><g><title>run (threading.py:1010) (4,523 samples, 91.71%)</title><rect x="6.4477%" y="100" width="91.7072%" height="15" fill="rgb(241,108,4)" fg:x="318" fg:w="4523"/><text x="6.6977%" y="110.50">run (threading.py:1010)</text></g><g><title>_worker (concurrent/futures/thread.py:89) (4,523 samples, 91.71%)</title><rect x="6.4477%" y="116" width="91.7072%" height="15" fill="rgb(247,173,49)" fg:x="318" fg:w="4523"/><text x="6.6977%" y="126.50">_worker (concurrent/futures/thread.py:89)</text></g><g><title>close (sqlalchemy/orm/session.py:1419) (5 samples, 0.10%)</title><rect x="98.3779%" y="132" width="0.1014%" height="15" fill="rgb(224,114,35)" fg:x="4852" fg:w="5"/><text x="98.6279%" y="142.50"></text></g><g><title>close (sqlalchemy/orm/session.py:2521) (20 samples, 0.41%)</title><rect x="98.1549%" y="68" width="0.4055%" height="15" fill="rgb(245,159,27)" fg:x="4841" fg:w="20"/><text x="98.4049%" y="78.50"></text></g><g><title>_close_impl (sqlalchemy/orm/session.py:2590) (11 samples, 0.22%)</title><rect x="98.3374%" y="84" width="0.2230%" height="15" fill="rgb(245,172,44)" fg:x="4850" fg:w="11"/><text x="98.5874%" y="94.50"></text></g><g><title>close (&lt;string&gt;:2) (11 samples, 0.22%)</title><rect x="98.3374%" y="100" width="0.2230%" height="15" fill="rgb(236,23,11)" fg:x="4850" fg:w="11"/><text x="98.5874%" y="110.50"></text></g><g><title>_go (sqlalchemy/orm/state_changes.py:139) (11 samples, 0.22%)</title><rect x="98.3374%" y="116" width="0.2230%" height="15" fill="rgb(205,117,38)" fg:x="4850" fg:w="11"/><text x="98.5874%" y="126.50"></text></g><g><title>_execute_context (sqlalchemy/engine/base.py:1812) (5 samples, 0.10%)</title><rect x="98.5604%" y="116" width="0.1014%" height="15" fill="rgb(237,72,25)" fg:x="4861" fg:w="5"/><text x="98.8104%" y="126.50"></text></g><g><title>execute (sqlalchemy/engine/base.py:1416) (6 samples, 0.12%)</title><rect x="98.5604%" y="68" width="0.1217%" height="15" fill="rgb(244,70,9)" fg:x="4861" fg:w="6"/><text x="98.8104%" y="78.50"></text></g><g><title>_execute_on_connection (sqlalchemy/sql/elements.py:516) (6 samples, 0.12%)</title><rect x="98.5604%" y="84" width="0.1217%" height="15" fill="rgb(217,125,39)" fg:x="4861" fg:w="6"/><text x="98.8104%" y="94.50"></text></g><g><title>_execute_clauseelement (sqlalchemy/engine/base.py:1638) (6 samples, 0.12%)</title><rect x="98.5604%" y="100" width="0.1217%" height="15" fill="rgb(235,36,10)" fg:x="4861" fg:w="6"/><text x="98.8104%" y="110.50"></text></g><g><title>__init__ (sqlalchemy/engine/base.py:146) (5 samples, 0.10%)</title><rect x="98.9862%" y="180" width="0.1014%" height="15" fill="rgb(251,123,47)" fg:x="4882" fg:w="5"/><text x="99.2362%" y="190.50"></text></g><g><title>raw_connection (sqlalchemy/engine/base.py:3298) (5 samples, 0.10%)</title><rect x="98.9862%" y="196" width="0.1014%" height="15" fill="rgb(221,13,13)" fg:x="4882" fg:w="5"/><text x="99.2362%" y="206.50"></text></g><g><title>connect (sqlalchemy/pool/base.py:449) (5 samples, 0.10%)</title><rect x="98.9862%" y="212" width="0.1014%" height="15" fill="rgb(238,131,9)" fg:x="4882" fg:w="5"/><text x="99.2362%" y="222.50"></text></g><g><title>_checkout (sqlalchemy/pool/base.py:1263) (5 samples, 0.10%)</title><rect x="98.9862%" y="228" width="0.1014%" height="15" fill="rgb(211,50,8)" fg:x="4882" fg:w="5"/><text x="99.2362%" y="238.50"></text></g><g><title>_connection_for_bind (sqlalchemy/orm/session.py:1189) (9 samples, 0.18%)</title><rect x="98.9659%" y="148" width="0.1825%" height="15" fill="rgb(245,182,24)" fg:x="4881" fg:w="9"/><text x="99.2159%" y="158.50"></text></g><g><title>connect (sqlalchemy/engine/base.py:3274) (9 samples, 0.18%)</title><rect x="98.9659%" y="164" width="0.1825%" height="15" fill="rgb(242,14,37)" fg:x="4881" fg:w="9"/><text x="99.2159%" y="174.50"></text></g><g><title>_execute_internal (sqlalchemy/orm/session.py:2241) (15 samples, 0.30%)</title><rect x="98.8848%" y="84" width="0.3041%" height="15" fill="rgb(246,228,12)" fg:x="4877" fg:w="15"/><text x="99.1348%" y="94.50"></text></g><g><title>_connection_for_bind (sqlalchemy/orm/session.py:2110) (13 samples, 0.26%)</title><rect x="98.9254%" y="100" width="0.2636%" height="15" fill="rgb(213,55,15)" fg:x="4879" fg:w="13"/><text x="99.1754%" y="110.50"></text></g><g><title>_connection_for_bind (&lt;string&gt;:2) (13 samples, 0.26%)</title><rect x="98.9254%" y="116" width="0.2636%" height="15" fill="rgb(209,9,3)" fg:x="4879" fg:w="13"/><text x="99.1754%" y="126.50"></text></g><g><title>_go (sqlalchemy/orm/state_changes.py:139) (13 samples, 0.26%)</title><rect x="98.9254%" y="132" width="0.2636%" height="15" fill="rgb(230,59,30)" fg:x="4879" fg:w="13"/><text x="99.1754%" y="142.50"></text></g><g><title>_execute_clauseelement (sqlalchemy/engine/base.py:1630) (8 samples, 0.16%)</title><rect x="99.2092%" y="132" width="0.1622%" height="15" fill="rgb(209,121,21)" fg:x="4893" fg:w="8"/><text x="99.4592%" y="142.50"></text></g><g><title>_compile_w_cache (sqlalchemy/sql/elements.py:684) (6 samples, 0.12%)</title><rect x="99.2498%" y="148" width="0.1217%" height="15" fill="rgb(220,109,13)" fg:x="4895" fg:w="6"/><text x="99.4998%" y="158.50"></text></g><g><title>oneshot (sqlalchemy/util/langhelpers.py:1270) (6 samples, 0.12%)</title><rect x="99.2498%" y="164" width="0.1217%" height="15" fill="rgb(232,18,1)" fg:x="4895" fg:w="6"/><text x="99.4998%" y="174.50"></text></g><g><title>_generate_cache_key (sqlalchemy/sql/cache_key.py:413) (5 samples, 0.10%)</title><rect x="99.2701%" y="180" width="0.1014%" height="15" fill="rgb(215,41,42)" fg:x="4896" fg:w="5"/><text x="99.5201%" y="190.50"></text></g><g><title>_init_compiled (sqlalchemy/engine/default.py:1419) (8 samples, 0.16%)</title><rect x="99.4931%" y="164" width="0.1622%" height="15" fill="rgb(224,123,36)" fg:x="4907" fg:w="8"/><text x="99.7431%" y="174.50"></text></g><g><title>create_cursor (sqlalchemy/engine/default.py:1753) (7 samples, 0.14%)</title><rect x="99.5134%" y="180" width="0.1419%" height="15" fill="rgb(240,125,3)" fg:x="4908" fg:w="7"/><text x="99.7634%" y="190.50"></text></g><g><title>create_default_cursor (sqlalchemy/engine/default.py:1759) (7 samples, 0.14%)</title><rect x="99.5134%" y="196" width="0.1419%" height="15" fill="rgb(205,98,50)" fg:x="4908" fg:w="7"/><text x="99.7634%" y="206.50"></text></g><g><title>cursor (sqlalchemy/pool/base.py:1485) (7 samples, 0.14%)</title><rect x="99.5134%" y="212" width="0.1419%" height="15" fill="rgb(205,185,37)" fg:x="4908" fg:w="7"/><text x="99.7634%" y="222.50"></text></g><g><title>cursor (sqlalchemy/dialects/mysql/aiomysql.py:200) (6 samples, 0.12%)</title><rect x="99.5337%" y="228" width="0.1217%" height="15" fill="rgb(238,207,15)" fg:x="4909" fg:w="6"/><text x="99.7837%" y="238.50"></text></g><g><title>_execute_context (sqlalchemy/engine/base.py:1812) (16 samples, 0.32%)</title><rect x="99.3917%" y="148" width="0.3244%" height="15" fill="rgb(213,199,42)" fg:x="4902" fg:w="16"/><text x="99.6417%" y="158.50"></text></g><g><title>_init_metadata (sqlalchemy/engine/cursor.py:1492) (5 samples, 0.10%)</title><rect x="99.8175%" y="228" width="0.1014%" height="15" fill="rgb(235,201,11)" fg:x="4923" fg:w="5"/><text x="100.0675%" y="238.50"></text></g><g><title>__init__ (sqlalchemy/engine/cursor.py:1442) (8 samples, 0.16%)</title><rect x="99.7972%" y="212" width="0.1622%" height="15" fill="rgb(207,46,11)" fg:x="4922" fg:w="8"/><text x="100.0472%" y="222.50"></text></g><g><title>_setup_result_proxy (sqlalchemy/engine/default.py:1831) (9 samples, 0.18%)</title><rect x="99.7972%" y="180" width="0.1825%" height="15" fill="rgb(241,35,35)" fg:x="4922" fg:w="9"/><text x="100.0472%" y="190.50"></text></g><g><title>_setup_dml_or_text_result (sqlalchemy/engine/default.py:1946) (9 samples, 0.18%)</title><rect x="99.7972%" y="196" width="0.1825%" height="15" fill="rgb(243,32,47)" fg:x="4922" fg:w="9"/><text x="100.0472%" y="206.50"></text></g><g><title>all (4,932 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(247,202,23)" fg:x="0" fg:w="4932"/><text x="0.2500%" y="62.50"></text></g><g><title>execute (sqlalchemy/orm/session.py:2365) (65 samples, 1.32%)</title><rect x="98.6821%" y="68" width="1.3179%" height="15" fill="rgb(219,102,11)" fg:x="4867" fg:w="65"/><text x="98.9321%" y="78.50"></text></g><g><title>_execute_internal (sqlalchemy/orm/session.py:2260) (40 samples, 0.81%)</title><rect x="99.1890%" y="84" width="0.8110%" height="15" fill="rgb(243,110,44)" fg:x="4892" fg:w="40"/><text x="99.4390%" y="94.50"></text></g><g><title>execute (sqlalchemy/engine/base.py:1416) (39 samples, 0.79%)</title><rect x="99.2092%" y="100" width="0.7908%" height="15" fill="rgb(222,74,54)" fg:x="4893" fg:w="39"/><text x="99.4592%" y="110.50"></text></g><g><title>_execute_on_connection (sqlalchemy/sql/elements.py:516) (39 samples, 0.79%)</title><rect x="99.2092%" y="116" width="0.7908%" height="15" fill="rgb(216,99,12)" fg:x="4893" fg:w="39"/><text x="99.4592%" y="126.50"></text></g><g><title>_execute_clauseelement (sqlalchemy/engine/base.py:1638) (31 samples, 0.63%)</title><rect x="99.3715%" y="132" width="0.6285%" height="15" fill="rgb(226,22,26)" fg:x="4901" fg:w="31"/><text x="99.6215%" y="142.50"></text></g><g><title>_execute_context (sqlalchemy/engine/base.py:1843) (13 samples, 0.26%)</title><rect x="99.7364%" y="148" width="0.2636%" height="15" fill="rgb(217,163,10)" fg:x="4919" fg:w="13"/><text x="99.9864%" y="158.50"></text></g><g><title>_exec_single_context (sqlalchemy/engine/base.py:1980) (11 samples, 0.22%)</title><rect x="99.7770%" y="164" width="0.2230%" height="15" fill="rgb(213,25,53)" fg:x="4921" fg:w="11"/><text x="100.0270%" y="174.50"></text></g></svg></svg>